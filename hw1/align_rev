#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

bitext = [[sentence.lower().strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)

# counting unique foreign words
for (f, e) in bitext:
	for f_i in set(f):
		f_count[f_i] +=1
	for e_j in set(e):
    		e_count[e_j] += 1
  
converge = 15
ef_count = defaultdict(float)
fe_count = defaultdict(float)
s_total = defaultdict(float)
s_total_rev = defaultdict(float)
t_prob = defaultdict(float)
t_prob_rev = defaultdict(float)
f_total = defaultdict(float)
e_total = defaultdict(float)

#initializing t probs uniformly
for (f,e) in bitext:
	for e_i in e:
		for f_j in f:
			t_prob[(e_i,f_j)] = 1.0/(len(f_count))

#### REVERSE
for (f,e) in bitext:
	for f_j in f:
		for e_i in e:
			t_prob_rev[(f_j,e_i)] = 1.0/(len(e_count))

while converge!=0:
	#initialize
	for (f,e) in bitext:
		for e_i in set(e):
			for f_j in set(f):
				ef_count[(e_i,f_j)] = 0
				f_total[f_j] = 0
	
		#### REVERSE
		for f_j in set(f):
			for e_i in set(e):
				fe_count[(f_j,e_i)] = 0
				e_total[e_i] = 0

	#normalization
	for (f,e) in bitext:
		for e_i in e:
			s_total[e_i] = 0
			for f_j in f:
				s_total[e_i]+= t_prob[(e_i,f_j)]

		#### REVERSE
		for f_j in f:
			s_total_rev[f_j] = 0
			for e_i in e:
				s_total_rev[f_j] += t_prob_rev[(f_j,e_i)]

		#collect counts
		for e_i in e:
			for f_j in f:
				ef_count[(e_i,f_j)] += (float(t_prob[(e_i,f_j)])/s_total[e_i])
				f_total[f_j] += (float(t_prob[(e_i,f_j)])/s_total[e_i])

		#### REVERSE
		for f_j in f:
			for e_i in e:
				fe_count[(f_j,e_i)] += (float(t_prob_rev[(f_j,e_i)])/s_total_rev[f_j])
				e_total[e_i] += (float(t_prob_rev[(f_j,e_i)])/s_total_rev[f_j])

	for (f,e) in bitext:
		for f_i in set(f):
			for e_j in set(e):
				t_prob[(e_j,f_i)] = ef_count[(e_j,f_i)]/float(f_total[f_i])

		#### REVERSE
		for e_j in set(e):
			for f_i in set(f):
				t_prob_rev[(f_i,e_j)] = fe_count[(f_i,e_j)]/float(e_total[e_j])

	converge -=1

#output to ibm1.a
for (f,e) in bitext:
  for (i, f_i) in enumerate(f): 
    for (j, e_j) in enumerate(e):
      if t_prob_rev[(f_i,e_j)] >= opts.threshold and t_prob[(e_j,f_i)] >= opts.threshold:
        sys.stdout.write("%i-%i " % (i,j))
  sys.stdout.write("\n")


